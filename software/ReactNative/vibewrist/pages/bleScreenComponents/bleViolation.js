// // recordViolation.js
let isViolationRecorded = false; // This state persists across function calls
let violations = 0; // should reset when the loop restarts
let intervalId = null; // To keep track of the interval

/**
 * Used to record the violations generated by the user.
 * @function recordViolation
 * @param {boolean} startRecording
 * @param {number} actualDistance
 * @param {number} endThreshold
 * @param {*} onViolation
 * @returns {string} Returns 'Finished' to signify that violations are no more.
 * */
const recordViolation = (
  startRecording,
  actualDistance,
  startThreshold,
  endThreshold,
  onViolation,
) => {
  if (startRecording) {
    // Interval to check distance
    //console.log('In violationFunction');
    //violations = 0; // should reset when the loop restarts
    if (actualDistance >= startThreshold && !isViolationRecorded) {
      violations++;
      isViolationRecorded = true;
      onViolation(true); // Call the callback function when a violation occurs
      console.log(`Violation recorded. Total violations: ${violations}`);
    } else if (actualDistance < endThreshold) {
      onViolation(false);
      isViolationRecorded = false;
    }
  } else {
    return "Finished";
  }
};

/**
 * Returns the number of violations that have been generated to this point.
 * @function getViolations
 * @param {None} - Does not need a parameter.
 * @returns {number} violations.
 * */
const getViolations = () => {
  return violations;
  //console.log('Violations in bleViolations: ', violations);
};

export { recordViolation, getViolations };
